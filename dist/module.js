// Generated by CoffeeScript 1.9.3
(function() {
  var deleteFiles, enrichData, exec, fs, generatePDF, htmlToPdf, info, isEmptyOrNull, isPath, jade, moment, path, tmp, validate, validateConfig, wkhtmltopdf;

  jade = require("jade");

  wkhtmltopdf = require("wkhtmltopdf");

  path = require("path");

  validate = require("jsonschema").validate;

  tmp = require("tmp");

  exec = require("child_process").exec;

  info = require("./../package.json");

  fs = require("fs");

  moment = require("moment");

  module.exports = {
    checkDependencies: function(config, callback) {
      var ex, ref, ref1;
      if (config == null) {
        config = {};
      }
      if (callback == null) {
        callback = function(installed) {
          if (installed !== true) {
            throw "Missing dependencies";
          }
        };
      }
      try {
        return exec(((ref = (ref1 = config.executables) != null ? ref1.wkhtmltopdf : void 0) != null ? ref : "wkhtmltopdf") + " -V", function(err, stdout, stderr) {
          var ref2, ref3;
          if (err != null) {
            callback(false);
          } else {
            return exec(((ref2 = (ref3 = config.executables) != null ? ref3.pdftk : void 0) != null ? ref2 : "pdftk") + " -h", function(err, stdout, stderr) {
              if (err != null) {
                callback(false);
              } else {
                callback(true);
              }
            });
          }
        });
      } catch (_error) {
        ex = _error;
        callback(false);
      }
    },
    generate: function(template, output, data, config, callback) {
      var _err, _validationError, ex, ref, ref1;
      if (data == null) {
        data = {};
      }
      if (config == null) {
        config = {};
      }
      if (callback == null) {
        callback = function(error, data) {
          if (error != null) {
            throw error;
          }
        };
      }
      try {
        if (isEmptyOrNull(template)) {
          throw "No template provided";
        }
        if (isEmptyOrNull(output)) {
          throw "No output file provided";
        }
        _validationError = validateConfig(config).errors;
        if (_validationError.length > 0) {
          _err = Error("Config is invalid");
          _err.stack = _validationError;
          throw _err;
          return;
        }
        wkhtmltopdf.command = (ref = (ref1 = config.executables) != null ? ref1.wkhtmltopdf : void 0) != null ? ref : "wkhtmltopdf";
        return this.checkDependencies(config, function(installed) {
          var _html, ex;
          if (installed !== true) {
            callback(Error("Missing dependencies"), null);
            return;
          }
          try {
            if (isPath(template)) {
              return fs.exists(template, function(exists) {
                var _html;
                if (exists === true) {
                  _html = jade.renderFile(template, enrichData(data));
                  if (isEmptyOrNull(_html)) {
                    throw "Error during html generation. Please check Jade syntax.";
                  }
                  return generatePDF(_html, output, config, function(error, pdf) {
                    return callback(error, pdf);
                  });
                } else {
                  _html = jade.render(template, enrichData(data));
                  if (isEmptyOrNull(_html)) {
                    throw "Error during html generation. Please check Jade syntax.";
                  }
                  return generatePDF(_html, output, config, function(error, pdf) {
                    return callback(error, pdf);
                  });
                }
              });
            } else {
              _html = jade.render(template, enrichData(data));
              if (isEmptyOrNull(_html)) {
                throw "Error during html generation. Please check Jade syntax.";
              }
              return generatePDF(_html, output, config, function(error, pdf) {
                return callback(error, pdf);
              });
            }
          } catch (_error) {
            ex = _error;
            callback(ex, null);
            _html = null;
          }
        });
      } catch (_error) {
        ex = _error;
        callback(ex, null);
      }
    }
  };

  generatePDF = function(html, output, config, callback) {
    return tmp.dir({
      prefix: "konsorten-"
    }, function(err, tempdir, cleanupCallback) {
      var _infoFileName, _infoFileTemplate, _styleSheetFileName, _tempPDFName, ref, ref1;
      if (err != null) {
        throw err;
      }
      if (config.metaData == null) {
        config.metaData = {};
      }
      _infoFileTemplate = "InfoBegin\nInfoKey: Creator\nInfoValue: " + ((ref = config.metaData.creator) != null ? ref : "m√ºller & konsorten (https://konsorten.de) PDF Report Generator") + "\nInfoBegin\nInfoKey: Producer\nInfoValue: " + info.name + " " + info.version + ("\n" + (config.metaData.author != null ? 'InfoBegin\nInfoKey: Author\nInfoValue: ' + ((ref1 = config.metaData.author) != null ? ref1 : '') + '\n' : '') + (config.metaData.title != null ? 'InfoBegin\nInfoKey: Title\nInfoValue: ' + config.metaData.title + '\n' : ''));
      if (config.stylesheet == null) {
        config.stylesheet = "body {padding: 0; margin: 0; font-family: arial, \"sans-serif\";} * {max-width: 100%;}";
      }
      _infoFileName = path.join(tempdir, "info.txt");
      _styleSheetFileName = path.join(tempdir, "style.css");
      _tempPDFName = path.join(tempdir, "generated.pdf");
      return fs.writeFile(_infoFileName, _infoFileTemplate, function(err) {
        if (err != null) {
          throw err;
        }
        return fs.writeFile(_styleSheetFileName, config.stylesheet, function(err) {
          var _doHTML2PDF, _filesToDelete, _writePageElements;
          if (err != null) {
            throw err;
          }
          _filesToDelete = [_infoFileName, _styleSheetFileName, _tempPDFName];
          _doHTML2PDF = function() {
            var ref2;
            return htmlToPdf(html, _tempPDFName, _styleSheetFileName, (ref2 = config.margin) != null ? ref2 : {}, config.header, config.footer, function(code) {
              if (code == null) {
                exec("pdftk \"" + _tempPDFName + "\" update_info_utf8 \"" + _infoFileName + ("\" output " + (config.letterhead != null ? '\"' + _tempPDFName + '_temp\"' : '\"' + output + '\"')), function(err, stdout, stderr) {
                  var _finish;
                  if (err != null) {
                    throw err;
                  }
                  if (stderr) {
                    throw stderr;
                  }
                  _finish = function() {
                    return deleteFiles(_filesToDelete, function(err) {
                      callback(null, output);
                      return cleanupCallback();
                    });
                  };
                  if (config.letterhead != null) {
                    _filesToDelete.push(_tempPDFName + "_temp");
                    return exec("pdftk " + _tempPDFName + "_temp multibackground \"" + config.letterhead + "\" output \"" + output + "\"", function(err, stdout, stderr) {
                      if (err != null) {
                        throw err;
                      }
                      if (stderr) {
                        throw stderr;
                      }
                      return _finish();
                    });
                  } else {
                    return _finish();
                  }
                });
                return true;
              } else {
                err = Error(code);
                return callback(err, null);
              }
            });
          };
          if ((config.header != null) || (config.footer != null)) {
            _writePageElements = function(elements, callback) {
              var i;
              i = elements.length;
              elements.forEach(function(element) {
                var _elementFileName;
                if (config[element] != null) {
                  _elementFileName = path.join(tempdir, element + ".html");
                  return fs.writeFile(_elementFileName, config[element], function(err) {
                    i--;
                    if (!err) {
                      config[element] = _elementFileName;
                      _filesToDelete.push(_elementFileName);
                    }
                    if (err) {
                      callback(err);
                      return;
                    } else if (i <= 0) {
                      callback(null);
                      return;
                    }
                  });
                } else {
                  i--;
                }
              });
            };
            return _writePageElements(["header", "footer"], function(err) {
              return _doHTML2PDF();
            });
          } else {
            return _doHTML2PDF();
          }
        });
      });
    });
  };

  htmlToPdf = function(html, output, styleSheet, margin, header, footer, callback) {
    var ref, ref1, ref2, ref3;
    return wkhtmltopdf(html, {
      encoding: "utf-8",
      output: output,
      pageSize: "a4",
      "header-html": header != null ? header : "",
      "footer-html": footer != null ? footer : "",
      "margin-top": (ref = margin.top) != null ? ref : 15,
      "margin-bottom": (ref1 = margin.bottom) != null ? ref1 : 15,
      "margin-left": (ref2 = margin.left) != null ? ref2 : 15,
      "margin-right": (ref3 = margin.right) != null ? ref3 : 15,
      dpi: 300,
      "image-quality": 100,
      "user-style-sheet": styleSheet
    }, function(code, signal) {
      return callback(code);
    });
  };

  deleteFiles = function(files, callback) {
    var i;
    i = files.length;
    files.forEach(function(filepath) {
      fs.unlink(filepath, function(err) {
        i--;
        if (err) {
          callback(err);
          return;
        } else if (i <= 0) {
          callback(null);
        }
      });
    });
  };

  enrichData = function(data) {
    data["tools"] = {
      moment: moment
    };
    data["today"] = function(format) {
      if (format == null) {
        format = "L";
      }
      return moment().format(format);
    };
    return data;
  };

  validateConfig = function(config) {
    var shema;
    shema = {
      type: "object",
      additionalProperties: false,
      properties: {
        stylesheet: {
          type: "string"
        },
        header: {
          type: "string"
        },
        footer: {
          type: "string"
        },
        margin: {
          type: "object",
          properties: {
            top: {
              type: "number"
            },
            bottom: {
              type: "number"
            },
            left: {
              type: "number"
            },
            right: {
              type: "number"
            }
          }
        },
        letterhead: {
          type: "string"
        },
        metaData: {
          type: "object",
          properties: {
            creator: {
              type: "string"
            },
            author: {
              type: "string"
            },
            title: {
              type: "string"
            }
          }
        },
        executables: {
          type: "object",
          properties: {
            wkhtmltopdf: {
              type: "string"
            },
            pdftk: {
              type: "string"
            }
          }
        }
      }
    };
    return validate(config, shema);
  };

  isPath = function(string) {
    return /^[-\w^√º√§√∂√ú√Ñ√ñ√ü&'@{}[\]\\\/:?#,$=!#().%+~ ]+$/.test(string);
  };

  isEmptyOrNull = function(string) {
    if ((string == null) || string.length === 0) {
      return true;
    } else {
      return false;
    }
  };

}).call(this);
